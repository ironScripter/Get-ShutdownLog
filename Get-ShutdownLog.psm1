Function Get-ShutdownLog{
    <#
    .SYNOPSIS
    Pulls a report for shutdown events on windows server and desktops.

    .DESCRIPTION
    This module collects a report of events generated by shutdown events.

    Created By James A. Arnett 
        
    .EXAMPLE
    This is the basic example of the syntax

    Running this command you will be prompted for a location to drop the report, as well as a line delimited list of servers.
    C:\PS> Get-ShutdownLog

    Running this command you will be prompted for a location to drop the report. It allows you to specify the Server/ Computername.
    C:\PS> Get-ShutdownLog -Server <SERVERNAME>

    .LINK
    http://bloggintechie.blogspot.com/
    https://chromebookparadise.wordpress.com/
    #>
    [cmdletbinding()]Param([string]$Server)
    Function private:Get-ServerList{   
        [System.Reflection.Assembly]::LoadWithPartialName("System.windows.forms") | Out-Null
        $OpenFileDialog = New-Object System.Windows.Forms.OpenFileDialog
        $OpenFileDialog.initialDirectory = $initialDirectory
        $OpenFileDialog.filter = "All files (*.*)| *.*"
        $OpenFileDialog.Title = "Please Specify Serverlist File:"
        $OpenFileDialog.ShowDialog() | Out-Null
        $OpenFileDialog.filename
    }
    Function private:Get-ReportPath{
        param([string]$Description="Select Folder for Report",[string]$RootFolder="Desktop")
        [System.Reflection.Assembly]::LoadWithPartialName("System.windows.forms") | Out-Null     

        $objForm = New-Object System.Windows.Forms.FolderBrowserDialog
        $objForm.Rootfolder = $RootFolder
        $objForm.Description = $Description
        $Show = $objForm.ShowDialog()
        If ($Show -eq "OK"){
            Return $objForm.SelectedPath
            }Else{
                Write-Error "Operation cancelled by user." -ErrorAction Stop
                }
    }
    Try{
        $ReportPath = Get-ReportPath
        $file_now = get-date -format MM-dd-yy.hhmmtt
        #Load VB for Popups
        [void][System.Reflection.Assembly]::LoadWithPartialName('Microsoft.VisualBasic')
        $NOE = [Microsoft.VisualBasic.Interaction]::InputBox("From newest to oldest, how many shutdown events would you like to go back?", "Shutdown Events", "10")
        $NOE =  $NOE.Trim();
        if(!$Server){
            $ServerListPath = Get-ServerList
            $serverList = Get-Content $ServerListPath
            Foreach($Server in $ServerList){
                Try{
                    Write-Host Attempting to gather Shutdown Log for $Server -ForegroundColor Yellow
                    Get-EventLog -ComputerName $Server -LogName System -Newest $NOE -InstanceId 2147484722 | select @{LABEL='Server Name';E={$_.MachineName}}, @{LABEL='Message Details';E={$_.Message}}, @{L='Date Time';E={$_.TimeWritten}}, @{L='Initiated By';E={$_.UserName}} | Export-Csv "$ReportPath\$file_now ShutdownLog.csv" -Append -NoTypeInformation
                    Write-Host ""
                    Write-Host Shutdown Log was successfully pulled for $Server... -ForegroundColor White
                }Catch{
                        Write-Host ""
                        Write-Host Cant connect to $server... -ForegroundColor Red
                        $columns = '"Server Name"'
                        $columns | select @{LABEL='Server Name';E={$server}} | Export-Csv "$ReportPath\$file_now Failed Shutdown Reports.csv" -Append -NoTypeInformation
                        Write-Host ""
                    }
                }
            }else{
                Try{
                    Write-Host Attempting to gather Shutdown Log for $Server -ForegroundColor Yellow
                    Get-EventLog -ComputerName $Server -LogName System -Newest $NOE -InstanceId 2147484722 | select @{LABEL='Server Name';E={$_.MachineName}}, @{LABEL='Message Details';E={$_.Message}}, @{L='Date Time';E={$_.TimeWritten}}, @{L='Initiated By';E={$_.UserName}} | Export-Csv "$ReportPath\$file_now ShutdownLog.csv" -Append -NoTypeInformation
                    Write-Host ""
                    Write-Host Shutdown Log was successfully pulled for $Server... -ForegroundColor White
                }
                    Catch{
                        Write-Host ""
                        Write-Host Cant connect to $server... -ForegroundColor Red
                        $columns = '"Server Name"'
                        $columns | select @{LABEL='Server Name';E={$server}} | Export-Csv "$ReportPath\$file_now Failed Shutdown Reports.csv" -Append -NoTypeInformation
                        Write-Host ""
                    }
            }
        Write-Host "Report Created: $ReportPath\$file_now Failed Shutdown Reports.csv"
        }Catch{
            Write-Error "An error has occured. Please try again."
        }
}